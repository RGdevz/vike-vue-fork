{"version":3,"file":"useConfig-server.js","sources":["../../../src/utils/objectKeys.ts","../../../src/hooks/useConfig/useConfig-server.ts"],"sourcesContent":["// https://stackoverflow.com/questions/52856496/typescript-object-keys-return-string\n// https://github.com/sindresorhus/ts-extras/blob/main/source/object-keys.ts\n/** Same as Object.keys() but with type inference */\nexport function objectKeys<T extends object>(obj: T): (keyof T)[] {\n  return Object.keys(obj) as any\n}\n","export { useConfig }\n\nimport type { PageContext } from 'vike/types'\nimport type { PageContextInternal } from '../../types/PageContext.js'\nimport type { ConfigFromHook } from '../../types/Config.js'\nimport { usePageContext } from '../usePageContext.js'\nimport { getPageContext } from 'vike/getPageContext'\nimport { objectKeys } from '../../utils/objectKeys.js'\nimport { includes } from '../../utils/includes.js'\nimport { configsCumulative } from './configsCumulative.js'\n\n/**\n * Set configurations inside components and Vike hooks.\n *\n * https://vike.dev/useConfig\n */\nfunction useConfig(): (config: ConfigFromHook) => void {\n  // Vike hook\n  let pageContext = getPageContext() as PageContext & PageContextInternal\n  if (pageContext) return (config: ConfigFromHook) => setPageContextConfigFromHook(config, pageContext)\n\n  // Component\n  pageContext = usePageContext()\n  return (config: ConfigFromHook) => {\n    if (pageContext && !pageContext._headAlreadySetWrapper?.val) {\n      setPageContextConfigFromHook(config, pageContext)\n    } else {\n      console.error(\"Using useConfig() with HTML streaming isn't supported yet\")\n      return\n    }\n  }\n}\n\nconst configsClientSide = ['title']\nfunction setPageContextConfigFromHook(config: ConfigFromHook, pageContext: PageContext & PageContextInternal) {\n  pageContext._configFromHook ??= {}\n  objectKeys(config).forEach((configName) => {\n    // Skip HTML only configs which the client-side doesn't need, saving KBs sent to the client as well as avoiding serialization errors.\n    if (pageContext.isClientSideNavigation && !configsClientSide.includes(configName)) return\n\n    if (!includes(configsCumulative, configName)) {\n      // Overridable config\n      const configValue = config[configName]\n      if (configValue === undefined) return\n      pageContext._configFromHook![configName] = configValue as any\n    } else {\n      // Cumulative config\n      const configValue = config[configName]\n      if (!configValue) return\n      pageContext._configFromHook![configName] ??= []\n      pageContext._configFromHook![configName].push(configValue as any)\n    }\n  })\n}\n"],"names":[],"mappings":";;;AAGO,SAAS,WAA6B,KAAqB;AACzD,SAAA,OAAO,KAAK,GAAG;AACxB;ACWA,SAAS,YAA8C;AAErD,MAAI,cAAc,eAAe;AACjC,MAAI,YAAoB,QAAA,CAAC,WAA2B,6BAA6B,QAAQ,WAAW;AAGpG,gBAAc,eAAe;AAC7B,SAAO,CAAC,WAA2B;;AACjC,QAAI,eAAe,GAAC,iBAAY,2BAAZ,mBAAoC,MAAK;AAC3D,mCAA6B,QAAQ,WAAW;AAAA,IAAA,OAC3C;AACL,cAAQ,MAAM,2DAA2D;AACzE;AAAA,IAAA;AAAA,EAEJ;AACF;AAEA,MAAM,oBAAoB,CAAC,OAAO;AAClC,SAAS,6BAA6B,QAAwB,aAAgD;AAC5G,cAAY,oBAAZ,YAAY,kBAAoB,CAAC;AACjC,aAAW,MAAM,EAAE,QAAQ,CAAC,eAAe;;AAEzC,QAAI,YAAY,0BAA0B,CAAC,kBAAkB,SAAS,UAAU,EAAG;AAEnF,QAAI,CAAC,SAAS,mBAAmB,UAAU,GAAG;AAEtC,YAAA,cAAc,OAAO,UAAU;AACrC,UAAI,gBAAgB,OAAW;AACnB,kBAAA,gBAAiB,UAAU,IAAI;AAAA,IAAA,OACtC;AAEC,YAAA,cAAc,OAAO,UAAU;AACrC,UAAI,CAAC,YAAa;AACN,wBAAA,iBAAA,iCAAiC,CAAC;AAC9C,kBAAY,gBAAiB,UAAU,EAAE,KAAK,WAAkB;AAAA,IAAA;AAAA,EAClE,CACD;AACH;"}