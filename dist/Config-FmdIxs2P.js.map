{"version":3,"file":"Config-FmdIxs2P.js","sources":["../src/types/Config.ts"],"sourcesContent":["import type { ImportString, PageContextServer, PageContext, PageContextClient } from 'vike/types'\nimport type { TagAttributes } from '../utils/getTagAttributesString'\nimport type { Viewport } from '../integration/onRenderHtml'\nimport type { ConfigsCumulative } from '../hooks/useConfig/configsCumulative'\nimport type { Component } from './PageContext'\nimport type {\n  OnCreateAppSync,\n  OnCreateAppAsync,\n  OnBeforeRenderHtmlSync,\n  OnBeforeRenderHtmlAsync,\n  OnAfterRenderHtmlSync,\n  OnAfterRenderHtmlAsync,\n  OnBeforeRenderClientSync,\n  OnBeforeRenderClientAsync,\n} from './VikeHooks'\n\n// https://vike.dev/pageContext#typescript\ndeclare global {\n  namespace Vike {\n    interface Config {\n      /**\n       * Add arbitrary `<head>` tags.\n       *\n       * https://vike.dev/Head\n       */\n      Head?: Component\n\n      /**\n       * A component that defines the visual layout common to several pages.\n       *\n       * Technically: the `<Layout>` component wraps the root component `<Page>`.\n       *\n       * https://vike.dev/Layout\n       */\n      Layout?: Component\n\n      /**\n       * Set the page's tilte.\n       *\n       * Generates:\n       * ```jsx\n       * <head>\n       *   <title>{title}</title>\n       *   <meta property=\"og:title\" content={title} />\n       * </head>\n       * ```\n       *\n       * https://vike.dev/title\n       */\n      title?: string | null | ((pageContext: PageContext_) => string | null | undefined)\n\n      /**\n       * Set the page's description.\n       *\n       * Generates:\n       * ```jsx\n       * <head>\n       *   <meta name=\"description\" content={description}>\n       *   <meta property=\"og:description\" content={description}>\n       * </head>\n       * ```\n       *\n       * https://vike.dev/description\n       */\n      description?: string | null | ((pageContext: PageContextServer) => string | null | undefined)\n\n      /**\n       * Set the page's preview image upon URL sharing.\n       *\n       * Generates:\n       * ```jsx\n       * <head>\n       *   <meta property=\"og:image\" content={image}>\n       *   <meta name=\"twitter:card\" content=\"summary_large_image\">\n       * </head>\n       * ```\n       *\n       * https://vike.dev/image\n       */\n      image?: string | null | ((pageContext: PageContextServer) => string | null | undefined)\n\n      /**\n       * Set the page's width shown to the user on mobile/tablet devices.\n       *\n       * @default \"responsive\"\n       *\n       * https://vike.dev/viewport\n       */\n      viewport?: Viewport | ((pageContext: PageContextServer) => Viewport | undefined)\n\n      /**\n       * Set the page's favicon.\n       *\n       * Generates:\n       * ```jsx\n       * <head>\n       *   <link rel=\"icon\" href={favicon} />\n       * </head>\n       * ```\n       *\n       * https://vike.dev/favicon\n       */\n      favicon?: string | null | ((pageContext: PageContextServer) => string | null | undefined)\n\n      /**\n       * Set the page's language (`<html lang>`).\n       *\n       * @default 'en'\n       *\n       * https://vike.dev/lang\n       */\n      lang?: string | null | ((pageContext: PageContext_) => string | null | undefined)\n\n      /**\n       * Add tag attributes such as `<html class=\"dark\">`.\n       *\n       * https://vike.dev/htmlAttributes\n       */\n      htmlAttributes?: TagAttributes | ((pageContext: PageContextServer) => TagAttributes | undefined)\n\n      /**\n       * Add tag attributes such as `<body class=\"dark\">`.\n       *\n       * https://vike.dev/bodyAttributes\n       */\n      bodyAttributes?: TagAttributes | ((pageContext: PageContextServer) => TagAttributes | undefined)\n\n      /**\n       * If `true`, the page is rendered twice: on the server-side (to HTML) and on the client-side (hydration).\n       *\n       * If `false`, the page is rendered only once in the browser.\n       *\n       * @default true\n       *\n       * https://vike.dev/ssr\n       */\n      ssr?: boolean\n\n      /**\n       * Whether to stream the page's HTML. Requires Server-Side Rendering (`ssr: true`).\n       * If true, the stream will be a Node Stream. If you need a Web Stream, use `stream: 'web'`.\n       *\n       * @default false\n       *\n       * https://vike.dev/stream\n       */\n      stream?: boolean | 'web'\n\n      /**\n       * The page's root Vue component.\n       *\n       * https://vike.dev/Page\n       */\n      Page?: Component\n\n      /**\n       * Raw HTML injected at the start of `<body>`.\n       *\n       * https://vike.dev/bodyHtmlBegin\n       */\n      bodyHtmlBegin?: BodyHtmlBoundary\n\n      /**\n       * Raw HTML injected at the end of `<body>`.\n       *\n       * @default `<div id=\"teleported\"></div>`\n       *\n       * https://vike.dev/bodyHtmlEnd\n       */\n      bodyHtmlEnd?: BodyHtmlBoundary\n\n      /**\n       * Hook called right after creating Vue's `app` instance.\n       *\n       * Typically used for registering Vue plugins.\n       *\n       * https://vike.dev/onCreateApp\n       */\n      onCreateApp?: OnCreateAppSync | OnCreateAppAsync | ImportString\n\n      /**\n       * Hook called right before rendering the page's root Vue component to HTML.\n       *\n       * https://vike.dev/onBeforeRenderHtml\n       */\n      onBeforeRenderHtml?: OnBeforeRenderHtmlSync | OnBeforeRenderHtmlAsync | ImportString\n\n      /**\n       * Hook called right after rendering the page's root Vue component to HTML.\n       *\n       * https://vike.dev/onAfterRenderHtml\n       */\n      onAfterRenderHtml?: OnAfterRenderHtmlSync | OnAfterRenderHtmlAsync | ImportString\n\n      /**\n       * Hook called right before mounting the page's root Vue component.\n       *\n       * Typically used for hydrating state management libraries.\n       *\n       * https://vike.dev/onBeforeRenderClient\n       */\n      onBeforeRenderClient?: OnBeforeRenderClientSync | OnBeforeRenderClientAsync | ImportString\n\n      /**\n       * Client-side hook called after the page is rendered.\n       *\n       * https://vike.dev/onAfterRenderClient\n       */\n      onAfterRenderClient?: (pageContext: PageContextClient) => void\n    }\n    interface ConfigResolved {\n      onCreateApp?: Array<OnCreateAppSync | OnCreateAppAsync>\n      onBeforeRenderHtml?: Array<OnBeforeRenderHtmlSync | OnBeforeRenderHtmlAsync>\n      onAfterRenderHtml?: Array<OnAfterRenderHtmlSync | OnAfterRenderHtmlAsync>\n      onBeforeRenderClient?: Array<OnBeforeRenderClientSync | OnBeforeRenderClientAsync>\n      onAfterRenderClient?: Function[]\n      bodyHtmlBegin?: BodyHtmlBoundary[]\n      bodyHtmlEnd?: BodyHtmlBoundary[]\n      Layout?: Component[]\n      Head?: Component[]\n      bodyAttributes?: TagAttributes[]\n      htmlAttributes?: TagAttributes[]\n    }\n  }\n}\n\nexport type __FakeExport_Config = never\n\n// Be able to reference it from within `namespace Vike`\n// - https://stackoverflow.com/questions/46559021/typescript-use-of-global-type-inside-namespace-with-same-type\n// - https://github.com/Microsoft/TypeScript/issues/983\ntype PageContext_ = PageContext\n\ntype BodyHtmlBoundary = string | ((pageContext: PageContext) => string)\n\n// JSDocs are preserved\ntype PickWithoutGetter<T, K extends keyof T> = {\n  [P in K]: Exclude<T[P], Function>\n}\nexport const configsFromHook = [\n  'Head',\n  'title',\n  'description',\n  'image',\n  'favicon',\n  'lang',\n  'viewport',\n  'bodyAttributes',\n  'htmlAttributes',\n] as const\ntype ConfigsFromHook = (typeof configsFromHook)[number]\nexport type ConfigFromHook = PickWithoutGetter<Vike.Config, ConfigsFromHook>\nexport type ConfigFromHookResolved = Omit<ConfigFromHook, ConfigsCumulative> &\n  Pick<Vike.ConfigResolved, ConfigsCumulative>\n"],"names":[],"mappings":"AA+OO,MAAM,kBAAkB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;"}